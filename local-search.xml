<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/luok_blog/2022/10/27/hello-world/"/>
    <url>/luok_blog/2022/10/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式概述（一）</title>
    <link href="/luok_blog/2022/09/13/01%20CS/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/a.%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
    <url>/luok_blog/2022/09/13/01%20CS/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/a.%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ul><li>Context（模式可适用的前提条件）</li><li>Theme或Problem（在特定条件下要解决的目标问题）</li><li>Solution（对目标问题求解过程中各种物理关系的记述）<br>经典定义：<br>模式是在<strong>特定环境下</strong>人们解决某类重复出现<strong>问题</strong>的一套成功或有效的<strong>解决方案</strong>。</li></ul><p>设计模式(Design Pattern)</p><ul><li>一套被<strong>反复使用的、多数人知晓的、经过分类编目的、代码设计经验的</strong>总结</li><li>是一种用于对软件系统中不断重现的设计问题的<strong>解决方案</strong>进行<strong>文档化</strong>的技术<br>是一种<strong>共享</strong>专家设计经验的技术</li><li>目的：为了可重用代码、让代码更容易被他人理解、提高代码可靠性</li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>设计模式是在<strong>特定环境下为</strong>解决<strong>某一通用软件设计</strong>问题提供的一套<strong>定制的解决方案</strong>，该方案描述了对象和类之间的相互作用。</p><p>基本要素</p><ul><li><strong>模式名称</strong> (Pattern Name) </li><li><strong>问题</strong> (Problem) </li><li><strong>解决方案</strong> (Solution) </li><li><strong>效果</strong> (Consequences) </li></ul><p>分类<br>根据目的</p><ul><li>创建型模式(Creational)主要用于<strong>创建对象</strong></li><li>结构型模式(Structural)主要用于<strong>处理类或对象的组合</strong></li><li>行为型模式(Behavioral)主要用于<strong>描述类或对象如何交互和怎样分配职责</strong><br>根据范围</li><li>类模式处理<strong>类和子类之间的关系</strong>，这些关系通过继承建立，在编译时刻就被确定下来，是一种<strong>静态</strong>关系</li><li>对象模式处理<strong>对象间的关系</strong>，这些关系在运行时变化，更具<strong>动态</strong>性</li></ul><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20220929112441.png"></p><p>优点</p><ul><li>融合了众多专家的经验，并以一种标准的形式供广大开发人员所用</li><li>提供了一套通用的设计词汇和一种通用的语言，以方便开发人员之间进行沟通和交流，使得设计方案更加通俗易懂</li><li>让人们可以更加简单方便地复用成功的设计和体系结构</li><li>使得设计方案更加灵活，且易于修改</li><li>将提高软件系统的开发效率和软件质量，且在一定程度上节约设计成本</li><li>有助于初学者更深入地理解面向对象思想，方便阅读和学习现有类库与其他系统中的源代码，还可以提高软件的设计水平和代码质量</li></ul><h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><p><a href="http://www.cs.utsa.edu/~cs3443/notes/designPrinciples/designPrinciples.html">Principles of Object-Oriented Design</a></p><p>面向对象设计原则为支持<strong>可维护性复用</strong>而诞生,<strong>指导性原则</strong>而非强制性原则，用于评价一个设计模式的使用效果的重要指标之一。</p><ul><li>可维护性(Maintainability)：指软件能够被理解、改正、适应及扩展的难易程度</li><li>可复用性(Reusability)：指软件能够被重复使用的难易程度</li></ul><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><blockquote><p><em><strong>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中。</strong></em></p></blockquote><p>单一职责原则是最简单的面向对象设计原则，用于<strong>控制类的粒度大小</strong>,就一个类而言，应该仅有<strong>一个引起它变化的原因</strong></p><p>分析</p><ul><li>一个类（大到模块，小到方法）<strong>承担的职责越多</strong>，它<strong>被复用的可能性就越小</strong></li><li><strong>当一个职责变化时</strong>，可能<strong>会影响其他职责的运作</strong></li><li>将这些职责进行分离，<strong>将不同的职责封装在不同的类中</strong></li><li>将不同的变化原因封装在不同的类中</li><li>单一职责原则是<strong>实现高内聚、低耦合的指导方针</strong></li></ul><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><blockquote><p><em><strong>软件实体应当对扩展开放，对修改关闭。</strong></em></p></blockquote><p>开闭原则是面向对象的<strong>可复用设计的第一块基石</strong>，是<strong>最重要</strong>的面向对象设计原则</p><p>分析<br>在开闭原则的定义中，软件实体可以是一个软件模块、一个由多个类组成的局部结构或一个独立的类<br>开闭原则是指软件实体应<strong>尽量在不修改原有代码的情况下进行扩展</strong><br><strong>抽象化</strong>是开闭原则的关键<br>相对稳定的<strong>抽象层</strong> + 灵活的<strong>具体层</strong><br>对可变性封装原则(Principle of Encapsulation of Variation, EVP)：找到系统的可变因素并将其封装起来</p><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><blockquote><p><strong>所有引用基类的地方必须能透明地使用其子类的对象</strong>。</p></blockquote><p>分析</p><ul><li>在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立。如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象</li><li>在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型</li></ul><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><blockquote><p>高层模块不应该依赖低层模块，它们都应该依赖抽象。<strong>抽象不应该依赖于细节，细节应该依赖于抽象。</strong></p></blockquote><p>要针对接口编程，不要针对实现编程.<br>分析</p><ul><li>在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，即使用接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明，以及数据类型的转换等</li><li>在程序中尽量使用抽象层进行编程，而将具体类写在配置文件中</li><li>针对抽象层编程，将具体类的对象通过依赖注入(Dependency Injection, DI)的方式注入到其他对象</li></ul><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><blockquote><p><strong>客户端不应该依赖那些它不需要的接口。</strong></p></blockquote><p>分析</p><ul><li>当一个接口太大时，需要将它分割成一些<strong>更细小</strong>的接口</li><li>使用该接口的客户端<strong>仅需知道与之相关的方法</strong>即可</li><li>每一个接口应该<strong>承担一种相对独立的角色</strong>，不干不该干的事，该干的事都要干</li></ul><h3 id="合成复用原则-组合-聚合复用原则"><a href="#合成复用原则-组合-聚合复用原则" class="headerlink" title="合成复用原则(组合/聚合复用原则)"></a>合成复用原则(组合/聚合复用原则)</h3><blockquote><p><strong>优先使用对象组合，而不是继承来达到复用的目的。</strong></p></blockquote><p>分析</p><ul><li>合成复用原则就是在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分</li><li>新对象通过委派调用已有对象的方法达到复用功能的目的</li><li>复用时要尽量使用组合/聚合关系（关联关系），少用继承</li><li>继承复用：实现简单，易于扩展。破坏系统的封装性；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；只能在有限的环境中使用。（“白箱”复用 ）</li><li>组合/聚合复用：耦合度相对较低，有选择性地调用成员对象的操作；可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。（“黑箱”复用 ）</li></ul><h3 id="迪米特法则-最少知识原则"><a href="#迪米特法则-最少知识原则" class="headerlink" title="迪米特法则(最少知识原则)"></a>迪米特法则(最少知识原则)</h3><blockquote><p>每一个软件单位对其他的单位都只有<strong>最少的知识</strong>，而且<strong>局限于那些与本单位密切相关的软件单位</strong>。</p></blockquote><p>分析</p><ul><li>迪米特法则要求<strong>一个软件实体应当尽可能少地与其他实体发生相互作用</strong></li><li>应用迪米特法则可<strong>降低系统的耦合度</strong>，使类与类之间保持松散的耦合关系</li><li>迪米特法则要求在设计系统时，应该尽量减少对象之间的交互</li><li>如果两个对象之间不必彼此直接通信，那么这两个对象就不应该发生任何直接的相互作用</li><li>如果其中一个对象需要调用另一个对象的方法，可以通过“第三者”转发这个调用</li><li>通过引入一个合理的“第三者”来降低现有对象之间的耦合度</li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
      <tag>考试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第四章 指令设计</title>
    <link href="/luok_blog/2022/07/13/01%20CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E6%8C%87%E4%BB%A4%E8%AE%BE%E8%AE%A1/"/>
    <url>/luok_blog/2022/07/13/01%20CS/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E6%8C%87%E4%BB%A4%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1指令的定义"><a href="#1-1指令的定义" class="headerlink" title="1.1指令的定义"></a>1.1指令的定义</h2><p>指令(又称机器指令):</p><ul><li>是指示计算机执行某种操作的命令，是计算机运行的<strong>最小功能单位</strong>。</li><li>一台计算机的所有指令的<strong>集合</strong>构成该机的<strong>指令系统</strong>，也称为<strong>指令集</strong>。<br>注:一台计算机只能执行自己指令系统中的指令，不能执行其他系统的指令。<br>Eg: x86架构、ARM架构</li></ul><h2 id="1-2指令的格式"><a href="#1-2指令的格式" class="headerlink" title="1.2指令的格式"></a>1.2指令的格式</h2><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023153906.png"></p><h3 id="按地址码数目分类"><a href="#按地址码数目分类" class="headerlink" title="按地址码数目分类"></a>按地址码数目分类</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023153948.png"></p><h3 id="按指令长度分类"><a href="#按指令长度分类" class="headerlink" title="按指令长度分类"></a>按指令长度分类</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023155811.png"></p><h3 id="按操作码长度分类"><a href="#按操作码长度分类" class="headerlink" title="按操作码长度分类"></a>按操作码长度分类</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023155214.png"></p><h3 id="按操作类型分类"><a href="#按操作类型分类" class="headerlink" title="按操作类型分类"></a>按操作类型分类</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023155455.png"></p><h2 id="1-3-拓展操作码"><a href="#1-3-拓展操作码" class="headerlink" title="1.3 拓展操作码"></a>1.3 拓展操作码</h2><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023160321.png"></p><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023161241.png"></p><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023161336.png"></p><h2 id="2-1-指令寻址"><a href="#2-1-指令寻址" class="headerlink" title="2.1 指令寻址"></a>2.1 指令寻址</h2><h2 id="2-2-顺序寻址"><a href="#2-2-顺序寻址" class="headerlink" title="2.2 顺序寻址"></a>2.2 顺序寻址</h2><h3 id="定长指令字结构"><a href="#定长指令字结构" class="headerlink" title="定长指令字结构"></a>定长指令字结构</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023162021.png"></p><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023161845.png"></p><h3 id="变长指令字结构"><a href="#变长指令字结构" class="headerlink" title="变长指令字结构"></a>变长指令字结构</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023162358.png"></p><h2 id="2-3跳跃寻址"><a href="#2-3跳跃寻址" class="headerlink" title="2.3跳跃寻址"></a>2.3跳跃寻址</h2><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023163008.png"></p><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023162903.png"></p><h2 id="3-1-数据寻址"><a href="#3-1-数据寻址" class="headerlink" title="3.1 数据寻址"></a>3.1 数据寻址</h2><h3 id="1-直接寻址"><a href="#1-直接寻址" class="headerlink" title="1.直接寻址"></a>1.直接寻址</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023164227.png"></p><h3 id="2-间接寻址"><a href="#2-间接寻址" class="headerlink" title="2.间接寻址"></a>2.间接寻址</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023165649.png"></p><h3 id="3-寄存器寻址"><a href="#3-寄存器寻址" class="headerlink" title="3.寄存器寻址"></a>3.寄存器寻址</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023165820.png"></p><h3 id="4-寄存器间接寻址"><a href="#4-寄存器间接寻址" class="headerlink" title="4.寄存器间接寻址"></a>4.寄存器间接寻址</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023165919.png"></p><h3 id="5-隐含寻址"><a href="#5-隐含寻址" class="headerlink" title="5.隐含寻址"></a>5.隐含寻址</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023170048.png"></p><h3 id="6-立即寻址"><a href="#6-立即寻址" class="headerlink" title="6.立即寻址"></a>6.立即寻址</h3><p> <img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023170406.png"></p><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023170446.png"></p><h3 id="7-偏移寻址（基址寻址、）"><a href="#7-偏移寻址（基址寻址、）" class="headerlink" title="7.偏移寻址（基址寻址、）"></a>7.偏移寻址（基址寻址、）</h3><p><img src="https://obs-pic-1309372570.cos.ap-chongqing.myqcloud.com/20221023171242.png"></p><h4 id="基址寻址"><a href="#基址寻址" class="headerlink" title="基址寻址"></a>基址寻址</h4><p><img src="https://image.glwsq.cn/img/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2022-03-19-20-01-42.png" alt="基址寻址"></p><p>基址寻址</p><h4 id="变址寻址"><a href="#变址寻址" class="headerlink" title="变址寻址"></a>变址寻址</h4><ul><li><a href="https://image.glwsq.cn/img/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2022-03-19-20-02-08.png" title="变址寻址"><img src="https://image.glwsq.cn/img/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2022-03-19-20-02-08.png" alt="变址寻址"></a><pre><code class="hljs">  [变址寻址](https://image.glwsq.cn/img/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2022-03-19-20-02-08.png &quot;变址寻址&quot;)        [![相对寻址](https://image.glwsq.cn/img/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2022-03-19-20-06-12.png)    相对寻址    ](https://image.glwsq.cn/img/%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-2022-03-19-20-06-12.png &quot;相对寻址&quot;)</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
      <tag>考试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
